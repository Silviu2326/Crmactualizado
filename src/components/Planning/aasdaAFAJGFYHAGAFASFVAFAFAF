// src/components/SesionEntrenamiento.tsx

import React, { useState } from 'react';
import { useTheme } from '../../contexts/ThemeContext';
import {
  Plus,
  Edit2,
  Trash2,
  Dumbbell,
  Target,
  ChevronDown,
  ChevronUp,
  Save,
  XCircle,
} from 'lucide-react';
import Button from '../Common/Button';
import { motion, AnimatePresence } from 'framer-motion';
import EditSessionPopup from './EditSessionPopup';
import { trainingVariants } from './trainingVariants';
import type { Set } from './trainingVariants';
import axios from 'axios';
import ExerciseSelector from './ExerciseSelector';

interface Session {
  _id: string;
  name: string;
  tipo: 'Normal' | 'Superset';
  rondas?: number;
  exercises: Exercise[];
}

interface Exercise {
  _id: string;
  name: string;
  sets: Set[];
}

interface Set {
  id: string;
  reps: number;
  weight: number;
  rest: number;
}

interface SesionEntrenamientoProps {
  session: Session;
  onClose: () => void;
  planningId: string;
  weekNumber: number;
  selectedDay: string;
}

const SesionEntrenamiento: React.FC<SesionEntrenamientoProps> = ({
  session,
  onClose,
  planningId,
  weekNumber,
  selectedDay,
}) => {
  const { theme } = useTheme();
  const [ejerciciosExpandidos, setEjerciciosExpandidos] = useState<Set<string>>(
    new Set()
  );
  const [showEditPopup, setShowEditPopup] = useState(false);
  const [isEditingRounds, setIsEditingRounds] = useState(false);
  const [editedRounds, setEditedRounds] = useState(session.rondas || 0);
  const [showExerciseSelector, setShowExerciseSelector] = useState(false);

  console.log('Session data:', session);

  const handleSaveSession = (updatedSession: Session) => {
    const updatedPlan: any = {
      ...session,
      name: updatedSession.name,
    };
    console.log('Plan actualizado:', updatedPlan);
  };

  const handleUpdateRounds = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        throw new Error('No se encontró el token de autenticación');
      }

      console.log('Actualizando rondas para sesión:', session._id, 'Nuevas rondas:', editedRounds);

      const response = await fetch(`http://localhost:3000/api/plannings/session/${session._id}/rounds`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`,
        },
        body: JSON.stringify({ rondas: editedRounds }),
      });

      console.log('Respuesta del servidor:', response.status);

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.mensaje || 'Error al actualizar las rondas');
      }

      // Actualizar el estado local
      setIsEditingRounds(false);
    } catch (error) {
      console.error('Error al actualizar las rondas:', error);
    }
  };

  const handleDeleteSession = async () => {
    try {
      await axios.delete(`http://localhost:3000/api/plannings/session/${session._id}`, {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${localStorage.getItem('token')}`
        }
      });
      onClose();
    } catch (error) {
      console.error('Error deleting session:', error);
    }
  };

  const toggleEjercicio = (ejercicioId: string) => {
    setEjerciciosExpandidos((prev) => {
      const newSet = new Set(prev);
      if (newSet.has(ejercicioId)) {
        newSet.delete(ejercicioId);
      } else {
        newSet.add(ejercicioId);
      }
      return newSet;
    });
  };

  const updatePlanningExercise = async (exerciseId: string, updatedSets: Set[]) => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        throw new Error('No se encontró el token de autenticación');
      }

      console.log('SesionEntrenamiento: Actualizando ejercicio:', {
        planningId,
        weekNumber,
        day: selectedDay,
        sessionId: session._id,
        exerciseId,
        sets: updatedSets
      });

      const url = `http://localhost:3000/api/plannings/${planningId}/weeks/${weekNumber}/days/${selectedDay}/sessions/${session._id}/exercises/${exerciseId}`;
      
      const response = await axios.put(
        url,
        { sets: updatedSets },
        {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        }
      );

      if (!response.data) {
        throw new Error('Error al actualizar el ejercicio');
      }

      console.log('SesionEntrenamiento: Ejercicio actualizado exitosamente:', response.data);
      return response.data;
    } catch (err) {
      console.error('SesionEntrenamiento: Error al actualizar ejercicio:', err);
      throw err;
    }
  };

  const handleSetChange = async (exerciseId: string, setId: string, field: keyof Set, value: number) => {
    try {
      const exercise = session.exercises.find(e => e._id === exerciseId);
      if (!exercise) return;

      const updatedSets = exercise.sets.map(set => 
        set.id === setId ? { ...set, [field]: value } : set
      );

      await updatePlanningExercise(exerciseId, updatedSets);
      
      // Actualizar el estado local después de la actualización exitosa
      session.exercises = session.exercises.map(e => 
        e._id === exerciseId ? { ...e, sets: updatedSets } : e
      );
    } catch (error) {
      console.error('Error al actualizar el set:', error);
      // Aquí podrías mostrar un mensaje de error al usuario
    }
  };

  const handleAddSet = async (exerciseId: string) => {
    try {
      const exercise = session.exercises.find(e => e._id === exerciseId);
      if (!exercise) return;

      const newSet: Set = {
        id: Date.now().toString(),
        reps: 12,
        weight: 10,
        rest: 60
      };

      const updatedSets = [...exercise.sets, newSet];
      await updatePlanningExercise(exerciseId, updatedSets);

      // Actualizar el estado local después de la actualización exitosa
      session.exercises = session.exercises.map(e => 
        e._id === exerciseId ? { ...e, sets: updatedSets } : e
      );
    } catch (error) {
      console.error('Error al agregar el set:', error);
      // Aquí podrías mostrar un mensaje de error al usuario
    }
  };

  const handleDeleteSet = async (exerciseId: string, setId: string) => {
    try {
      const exercise = session.exercises.find(e => e._id === exerciseId);
      if (!exercise || exercise.sets.length <= 1) return; // No permitir eliminar el último set

      const updatedSets = exercise.sets.filter(set => set.id !== setId);
      await updatePlanningExercise(exerciseId, updatedSets);

      // Actualizar el estado local después de la actualización exitosa
      session.exercises = session.exercises.map(e => 
        e._id === exerciseId ? { ...e, sets: updatedSets } : e
      );
    } catch (error) {
      console.error('Error al eliminar el set:', error);
      // Aquí podrías mostrar un mensaje de error al usuario
    }
  };

  const handleSelectExercise = (exercise: any) => {
    // Aquí puedes manejar el ejercicio seleccionado
    console.log('Ejercicio seleccionado:', exercise);
    setShowExerciseSelector(false);
  };

  const renderSetValue = (value: number, unit: string) => {
    switch(unit) {
      case 'kg':
        return `${value} kg`;
      case 'reps':
        return `${value} reps`;
      case 'sec':
        return `${value} seg`;
      default:
        return value;
    }
  };

  return (
    <div
      className={`p-4 rounded-lg shadow-md mb-4 ${
        theme === 'dark' ? 'bg-gray-800' : 'bg-white'
      }`}
    >
      <div className="flex flex-col space-y-2">
        {/* Encabezado de la sesión */}
        <div className="flex items-center justify-between">
          <div className="flex-1">
            <div className="flex items-center space-x-4">
              <h3 className="text-lg font-semibold">{session.name}</h3>
              {session.tipo === 'Superset' && (
                <span className="px-2 py-1 text-xs rounded-full bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                  Superset
                </span>
              )}
            </div>
          </div>
          {/* Controles de la sesión */}
          <div className="flex items-center space-x-2">
            <Button
              variant="normal"
              onClick={() => setShowExerciseSelector(true)}
              className="p-2"
            >
              <Plus className="w-4 h-4" />
            </Button>
            <Button
              variant="normal"
              onClick={() => setShowEditPopup(true)}
              className="p-2"
            >
              <Edit2 className="w-4 h-4" />
            </Button>
            <Button variant="danger" onClick={handleDeleteSession} className="p-2">
              <Trash2 className="w-4 h-4" />
            </Button>
          </div>
        </div>

        {/* ExerciseSelector Modal */}
        <ExerciseSelector
          isOpen={showExerciseSelector}
          onClose={() => setShowExerciseSelector(false)}
          onSelectExercise={handleSelectExercise}
          planningId={planningId}
          weekNumber={weekNumber}
          selectedDay={selectedDay}
          sessionId={session._id}
        />

        {/* Rondas (si es superset) */}
        {session.tipo === 'Superset' && (
          <div className="flex items-center space-x-2 mt-2">
            <span className="text-sm">Rondas:</span>
            {isEditingRounds ? (
              <div className="flex items-center space-x-2">
                <input
                  type="number"
                  value={editedRounds}
                  onChange={(e) => setEditedRounds(Number(e.target.value))}
                  className={`w-16 px-2 py-1 rounded ${
                    theme === 'dark'
                      ? 'bg-gray-700 text-white'
                      : 'bg-gray-100 text-gray-800'
                  }`}
                  min="1"
                />
                <Button
                  variant="success"
                  onClick={() => {
                    handleUpdateRounds();
                    setIsEditingRounds(false);
                  }}
                  className="p-1"
                >
                  <Save className="w-4 h-4" />
                </Button>
                <Button
                  variant="danger"
                  onClick={() => {
                    setEditedRounds(session.rondas || 0);
                    setIsEditingRounds(false);
                  }}
                  className="p-1"
                >
                  <XCircle className="w-4 h-4" />
                </Button>
              </div>
            ) : (
              <div className="flex items-center space-x-2">
                <span className="font-medium">{session.rondas || 0}</span>
                <Button
                  variant="normal"
                  onClick={() => setIsEditingRounds(true)}
                  className="p-1"
                >
                  <Edit2 className="w-4 h-4" />
                </Button>
              </div>
            )}
          </div>
        )}

        {/* Lista de ejercicios */}
        <div className="mt-4 space-y-4">
          {session.exercises.map((exercise) => (
            <div
              key={exercise._id}
              className={`p-4 rounded-lg ${
                theme === 'dark' ? 'bg-gray-700' : 'bg-gray-100'
              }`}
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <Dumbbell className="w-5 h-5" />
                  <h4 className="font-medium">{exercise.name}</h4>
                </div>
                <div className="flex items-center space-x-2">
                  <Button
                    variant="normal"
                    onClick={() => toggleEjercicio(exercise._id)}
                    className="p-2"
                  >
                    {ejerciciosExpandidos.has(exercise._id) ? (
                      <ChevronUp className="w-4 h-4" />
                    ) : (
                      <ChevronDown className="w-4 h-4" />
                    )}
                  </Button>
                  <Button
                    variant="danger"
                    onClick={() => handleDeleteExercise(exercise._id)}
                    className="p-2"
                  >
                    <Trash2 className="w-4 h-4" />
                  </Button>
                </div>
              </div>

              {/* Sets del ejercicio */}
              {ejerciciosExpandidos.has(exercise._id) && (
                <div className="mt-4 space-y-2">
                  {exercise.sets.map((set, index) => (
                    <div
                      key={set.id}
                      className={`p-3 rounded ${
                        theme === 'dark' ? 'bg-gray-600' : 'bg-gray-200'
                      } flex items-center justify-between`}
                    >
                      <div className="flex items-center space-x-4">
                        <span className="text-sm font-medium">Set {index + 1}</span>
                        <div className="flex items-center space-x-2">
                          <Target className="w-4 h-4" />
                          <span>{renderSetValue(set.reps, 'reps')}</span>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Dumbbell className="w-4 h-4" />
                          <span>{renderSetValue(set.weight, 'kg')}</span>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Clock className="w-4 h-4" />
                          <span>{renderSetValue(set.rest, 'sec')}</span>
                        </div>
                      </div>
                      <Button
                        variant="danger"
                        onClick={() => handleDeleteSet(exercise._id, set.id)}
                        className="p-1"
                      >
                        <Trash2 className="w-4 h-4" />
                      </Button>
                    </div>
                  ))}
                  <Button
                    variant="normal"
                    onClick={() => handleAddSet(exercise._id)}
                    className="w-full mt-2"
                  >
                    <Plus className="w-4 h-4 mr-2" />
                    Añadir Set
                  </Button>
                </div>
              )}
            </div>
          ))}
        </div>
      </div>

      {/* Popup de edición */}
      {showEditPopup && (
        <EditSessionPopup
          session={session}
          onSave={handleSaveSession}
          onClose={() => setShowEditPopup(false)}
        />
      )}
    </div>
  );
};

export default SesionEntrenamiento;
